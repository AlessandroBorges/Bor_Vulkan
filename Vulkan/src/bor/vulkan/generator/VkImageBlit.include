//VkImageBlit.include  
//#setSrcOffsets

   /**
    * pointers to srcOffsets
    */
    private long[] srcOffsetsPtr = new long[2];


    /**
     * Copy VkOffset3D
     * @param dst destination
     * @param src source
     */
    private void copy(VkOffset3D dst, VkOffset3D src) {
         dst.x(src.x);
         dst.y(src.y);
         dst.z(src.z);
    }
     
	/**
	 * Set method for field srcOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  srcOffsets
	 * 
	 * @param srcOffsets - a instance of VkOffset3D[].
	 * @return this VkStruct instance.
	 */ 
	 public VkImageBlit srcOffsets(VkOffset3D[] srcOffsetsNew){
	     if(this.srcOffsets[0] == null){
                 getSrcOffsets0(ptr, srcOffsetsPtr);
             }
             if(srcOffsets[0] != srcOffsetsNew[0]){
                 copy(srcOffsets[0] , srcOffsetsNew[0]);
             }
             
             if(srcOffsets[1] != srcOffsetsNew[1]){
                 copy(srcOffsets[1] , srcOffsetsNew[1]);
             }
       return this;
	 }
	
//#END	
     
//#getSrcOffsets     
    
	/**
     * Get method for field dstOffsets      [vkstruct_array]<br>
     * Prototype: VkOffset3D[]  dstOffsets
     */ 
     public VkOffset3D[] srcOffsets(){
            getDstOffsets0(ptr, srcOffsetsPtr);             
            if(this.srcOffsets[0] == null)
                    srcOffsets[0] = new VkOffset3D(srcOffsetsPtr[0]);           
            if(this.srcOffsets[1] == null)
                    srcOffsets[1] = new VkOffset3D(srcOffsetsPtr[1]);
            return this.srcOffsets;
    }
//#END

//#setDstOffsets
    /**
	 * Set method for field dstOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  dstOffsets
	 * 
	 * @param dstOffsets - a instance of VkOffset3D[].
	 * @return this VkStruct instance.
	 */ 
	 public VkImageBlit dstOffsets(VkOffset3D[] dstOffsetsNew){
        	 if(this.dstOffsets[0] == null){
		     getDstOffsets0(ptr, dstOffsetsPtr);
		 }
		 if(dstOffsets[0] != dstOffsetsNew[0]){
		     copy(dstOffsets[0] , dstOffsetsNew[0]);
		 }
		 
		 if(dstOffsets[1] != dstOffsetsNew[1]){
                     copy(dstOffsets[1] , dstOffsetsNew[1]);
                 }
	      return this;
	 }

//#END
     
//#getDstOffsets 
    /**
	 * pointers to native dstOffset structs 
	 */
     private long[] dstOffsetsPtr = new long[2]; 
	/**
	 * Get method for field dstOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  dstOffsets
	 */ 
	 public VkOffset3D[] dstOffsets(){
	    getDstOffsets0(ptr, dstOffsetsPtr);		 
	    if(this.dstOffsets[0] == null)
		     dstOffsets[0] = new VkOffset3D(dstOffsetsPtr[0]);		 
		if(this.dstOffsets[1] == null)
             dstOffsets[1] = new VkOffset3D(dstOffsetsPtr[1]);
		return this.dstOffsets;
	 }    
     
//#END 
   
//#setSrcOffsets0     
   /**
	 * Native SET method for field srcOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  srcOffsets
	 */ 
	 private static native void setSrcOffsets0(Buffer ptr, java.nio.ByteBuffer  _off0, java.nio.ByteBuffer _off1);/*
		 VkImageBlit* vkObj = (VkImageBlit*)(ptr);		 
		 VkOffset3D* off0 = (VkOffset3D*) _off0;
		 VkOffset3D* off1 = (VkOffset3D*) _off1;		  
		 vkObj->srcOffsets[0] = (*off0);
		 vkObj->srcOffsets[1] = (*off1); 
	  */

//#END

//#getSrcOffsets0
	/**
	 * Native GET method for field srcOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  srcOffsets
	 */ 
	 private static native void getSrcOffsets0(Buffer ptr, long[] offs);/*
             VkImageBlit* vkObj = (VkImageBlit*)(ptr);               
             offs[0] = reinterpret_cast<jlong>(&vkObj->srcOffsets[0]);
             offs[1] = reinterpret_cast<jlong>(&vkObj->srcOffsets[1]);
         */
//#END

//#setDstOffsets0         
    /**
	 * Native SET method for field dstOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  dstOffsets
	 */ 
	 private static native void setDstOffsets0(Buffer ptr, java.nio.ByteBuffer  _off0, java.nio.ByteBuffer _off1);/*
             VkImageBlit* vkObj = (VkImageBlit*)(ptr);               
             VkOffset3D* off0 = (VkOffset3D*) _off0;
             VkOffset3D* off1 = (VkOffset3D*) _off1;                  
             vkObj->dstOffsets[0] = (*off0);
             vkObj->dstOffsets[1] = (*off1); 
         */
         
//#END
//#getDstOffsets0
	/**
	 * Native GET method for field dstOffsets	[vkstruct_array]<br>
	 * Prototype: VkOffset3D[]  dstOffsets
	 */ 
	 private static native long getDstOffsets0(Buffer ptr, long[] offs);/*
             VkImageBlit* vkObj = (VkImageBlit*)(ptr);               
             offs[0] = reinterpret_cast<jlong>(&vkObj->dstOffsets[0]);
             offs[1] = reinterpret_cast<jlong>(&vkObj->dstOffsets[1]);
         */  
//#END         